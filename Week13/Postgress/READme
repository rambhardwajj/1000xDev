
<!-- make a repo -->
npm install pg
npm install @types/pg

<!-- In src folder make a file -->
	utits.ts 
		<!-- in this file make a "client" of postgres  -->
		How? ( see the utils.js file )
			import Client from pg 
			then make a function getClient 
			pass your postgress url as parameter into the Client constructor
			client.connect();
			return  client ;
		
<!-- In src folder make files to push queries into the db ( see the files ) -->
	in the files
		first import getClient function from the utils file 
		then retrieve the client 
			const client = await getClient();
		then make a query to CRUD into the table or make a table etc and then
		push the query into the pg database :-
			<!-- making query -->
			const createUserTableQuery = `
				CREATE TABLE users (
					id SERIAL PRIMARY KEY,
					email VARCHAR(255) UNIQUE NOT NULL,
					password VARCHAR(255) NOT NULL
				);
			`;
			<!-- for executing query to the database -->
			await client.query(createUserTableQuery);   
			
<!-- Now build the porject  -->
	npm run build 
	node dist/create-table.js 
	<!-- Output -->
		Table created successfully

<!-- Main points  -->
	to prevent SQL Injection pass the values in .query function as $1 $2 etc   


<!-- Joins -->
Inner Join => A Intersection B 
	-> will show only the users that have users and some todos as well 
Left Join  => A Union B - Only(B)
	-> will show all the users with their todos if a user dont have any todo then that user will bw shown with null values 
Right Join => Opposite of left join 
Full join  => A Union B 

<!-- Problem With Sql  -->
 1. Difficult to remember the tables 
 2. hard to visualize 
 3. Have to write raw sql 
 4. Migrations are harder 
 5. You dont get the best types

<!-- Solution for all the problems? -->
 A. ORMs 
